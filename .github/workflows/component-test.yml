# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Component Tests
on:
  pull_request:
    types: [labeled]
  push:
    branches:
      - 'feature/component-test-*'
      - 'test/component-*'
  schedule:
    - cron: "0 0 * * *" # Run every day at midnight
  workflow_dispatch:  # Run on manual trigger
    inputs:
      run-component-tests:
        description: 'Run component tests'
        required: true
        type: boolean
        default: false
      emf-branch:
        description: 'The branch, tag or SHA to checkout EMF'
        required: true
        type: string
        default: 'main'

permissions:
  contents: read

jobs:
  component-tests:
    name: Deploy Kind Orchestrator and Run Component Tests
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && contains(github.event.label.name, 'run-component-tests'))
    runs-on: ${{ github.repository_owner == 'intel' && 'intel-ubuntu-latest' || 'ubuntu-latest' }} # Use standard runners
    timeout-minutes: 60
    env:
      ORCH_DEFAULT_PASSWORD: ${{ secrets.ORCH_DEFAULT_PASSWORD }}
      CODER_DIR: ${{ github.workspace }}

    steps:
      - name: Deploy Kind Orchestrator
        id: deploy-kind-orchestrator
        uses: open-edge-platform/edge-manageability-framework/.github/actions/deploy_kind@main
        timeout-minutes: 45
        with:
          orch_version: ${{ inputs.emf-branch || 'main' }}
          orch_password: ${{ secrets.ORCH_DEFAULT_PASSWORD }}
          docker_username: ${{ secrets.SYS_DOCKERHUB_USERNAME }}
          docker_password: ${{ secrets.SYS_DOCKERHUB_RO }}
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          deployment_type: 'all'

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24.1'
          cache: true

      - name: Checkout app-orch-tenant-controller repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          path: app-orch-tenant-controller
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Get current git hash of the app-orch-tenant-controller PR
        id: get-git-hash-tenant-controller
        working-directory: app-orch-tenant-controller
        env:
          GIT_HASH_CHARTS: ${{ github.event.pull_request.head.sha }}
        run: echo "GIT_HASH_CHARTS=$GIT_HASH_CHARTS" >> "$GITHUB_ENV"

      - name: Setup users and project/org
        shell: bash
        run: |
          mage tenantUtils:createDefaultMtSetup
          echo "Orch org/project/users created!"
          echo "Project uID:"
          kubectl get projects.project -o json | jq -r ".items[0].status.projectStatus.uID"

      - name: Build binaries
        working-directory: app-orch-tenant-controller
        run: |
          make build

      # Install versions of the build tools that are different from what is in
      # the runner. These must match the .tool-versions file in the app-orch-tenant-controller repo.
      - name: Install tenant-controller build tools
        run: |
          asdf install kind 0.29.0
          asdf install kubectl 1.33.2
          asdf install yq 4.45.4
          go install github.com/jstemmer/go-junit-report@latest

      - name: Redeploy and Rebuild app-orch-tenant-controller
        working-directory: app-orch-tenant-controller
        run: |
          make coder-redeploy
          make coder-rebuild

      - name: Describe app-orch-tenant-controller
        run: kubectl describe deployments.app -n orch-app app-orch-tenant-controller || echo "Deployment may be in different namespace"

      - name: Wait for app-orch-tenant-controller pod to be Running
        run: |
          MAX_RETRIES=30
          count=0
          while [ $count -lt $MAX_RETRIES ]; do
            POD_NAME=$(kubectl get pods -n orch-app -l app.kubernetes.io/instance=app-orch-tenant-controller -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -z "$POD_NAME" ]; then
              echo "No tenant controller pod found yet, retrying..."
              count=$((count+1))
              sleep 10
              continue
            fi
            POD_STATUS=$(kubectl get pod $POD_NAME -n orch-app -o jsonpath='{.status.phase}')
            READY_STATUS=$(kubectl get pod $POD_NAME -n orch-app -o jsonpath='{.status.containerStatuses[0].ready}' 2>/dev/null || echo "false")
            if [ "$POD_STATUS" == "Running" ] && [ "$READY_STATUS" == "true" ]; then
              echo "Pod $POD_NAME is Running and Ready."
              break
            else
              echo "Pod $POD_NAME status: $POD_STATUS, Ready: $READY_STATUS"
              count=$((count+1))
              sleep 10
            fi
          done
          if [ $count -eq $MAX_RETRIES ]; then
            echo "Pod did not reach Running state within time limit."
            kubectl get pods -A
            exit 1
          fi

      - name: Run Tenant Controller Component Tests
        working-directory: app-orch-tenant-controller
        env:
          PATH: ${{ env.PATH }}:${{ env.GOPATH }}/bin
        run: |
          make component-test
          echo "Component tests done!"

      - name: Report
        uses: becheran/go-testreport@main
        with:
          input: app-orch-tenant-controller/test/test-report.json
          output: app-orch-tenant-controller/test/${{ github.event_name }}-${{ github.event.number }}-test-report.html
          template: app-orch-tenant-controller/test/template.html

      # Several diagnostic commands to run in case of failure. Collect all the argo
      # application state and describe all the pods.

      - name: list all argo applications
        if: failure()
        run: |
          kubectl get applications.argoproj.io -o wide -A

      - name: describe all argo applications
        if: failure()
        run: |
          kubectl describe applications.argoproj.io -A

      - name: get all pods
        if: failure()
        run: |
          kubectl get pods -A -o wide

      - name: describe all pods
        if: failure()
        run: |
          kubectl describe pods -A

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: test-report
          path: app-orch-tenant-controller/test/${{ github.event_name }}-${{ github.event.number }}-test-report.html
          retention-days: 14

      # collect app orch tenant controller logs in case of failure
      - name: Get app-orch-tenant-controller diagnostic information
        if: failure()
        id: get-app-orch-tenant-controller-diag-info
        run: |
          kubectl logs -n orch-app -l app=app-orch-tenant-controller --tail=-1 > app-orch-tenant-controller.log || echo "No current logs for app-orch-tenant-controller"